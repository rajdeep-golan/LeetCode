class WordSearch {
    boolean visited[][];
    public boolean solution(char[][] board, String word) {
  
        visited=new boolean[board.length][board[0].length];
    for(int i=0;i<board.length;i++)
      for(int j=0;j<board[0].length;j++)
        if(word.charAt(0)==board[i][j] && searchWord(board,word,i,j,0)) //0 is the index(length of word till now sent)
          return true;
     return false;
     }
   
   public boolean searchWord(char[][] board,String word,int i,int j,int index){
    //Successful search , i.e. we found the complete word when the index is same as length of word
    if(index==word.length())
      return true;
      
    //Boundary check
    if(i<0 || i>=board.length || j<0 || j>=board[0].length || word.charAt(index)!=board[i][j] ||  visited[i][j])    //i,j , current letter don't match , already visited
      return false;
      
    visited[i][j]=true;
    
    //We recursively call the search method for down , up , right and left and look for corresponding letters
    if( searchWord(board,word,i+1,j,index+1) ||
        searchWord(board,word,i-1,j,index+1) ||
        searchWord(board,word,i,j-1,index+1) ||
        searchWord(board,word,i,j+1,index+1)  )
        return true;
        
    visited[i][j]=false;
     return false;
   }
   

    
}
