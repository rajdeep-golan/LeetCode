import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'isBalanced' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts STRING s as parameter.
     */

    public static String isBalanced(String s) {
    // Write your code here
        String yes="YES",no="NO";
        int start=0,end=s.length()-1;
        HashMap<Character,Character> brackets = new HashMap<>();
        brackets.put('(',')');
        brackets.put('[',']');
        brackets.put('{','}');
        List<Character> closingBrackets = new ArrayList<>();
        closingBrackets.add(')');
        closingBrackets.add('}');
        closingBrackets.add(']');
       Stack<Character> openingBrackets = new Stack<>();
       for(int i=0;i<s.length();i++){
           char a=s.charAt(i);
           if(brackets.containsKey(a))
             openingBrackets.push(a);
           else {
               if(openingBrackets.isEmpty())
                    return no;
               if(a!=brackets.get(openingBrackets.pop()))     
                return no;
           }
       }
       if(openingBrackets.isEmpty())
        return yes;
       return no; 
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, t).forEach(tItr -> {
            try {
                String s = bufferedReader.readLine();

                String result = Result.isBalanced(s);

                bufferedWriter.write(result);
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
