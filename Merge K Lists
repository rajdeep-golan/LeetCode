/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        // PriorityQueue<ListNode> minHeap = new PriorityQueue<>((a,b)-> a.val - b.val);
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        for(ListNode list : lists){
            while(list!=null){
                minHeap.add(list.val);
                list = list.next;
            }
        }
        ListNode result = new ListNode(-1);
        ListNode current = result;
        while(!minHeap.isEmpty()){
            current.next = new ListNode(minHeap.remove());
            current = current.next;
        }
            
        return result.next;
    }
}
