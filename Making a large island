class Solution {
    public int largestIsland(int[][] grid) {
        if(grid==null || grid.length==0)
            return 0;
    
        int dir[][] = {{1,0},{-1,0},{0,1},{0,-1}};
        HashMap<Integer,Integer> map = new HashMap<>();
        int max = Integer.MIN_VALUE;
        int id = 2;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[i].length;j++){
                if(grid[i][j]==1)
                {
                    int size = dfs(grid,i,j,id);
                      max = Math.max(max,size);
                    map.put(id++,size);
                 }
            }
        }
      
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[i].length;j++){
                  int sum =1;
                if(grid[i][j]==0){
                    HashSet<Integer> set = new HashSet<>();
                    for(int[] d:dir){
                        
                        int x = d[0]+i,y=d[1]+j;
                        if(x>=0  && x<grid.length && y>=0 && y<grid[0].length && grid[x][y]!=0)
                            
                        set.add(grid[x][y]);
                        
                    }
                    for(int m:set){
                        int v = map.get(m);
                        sum+=v;
                    }
                    max = Math.max(max,sum);
                }
                }
        }
        return max;
    }
    private int dfs(int[][] grid, int i,int j,int id){
        if(i<0  || i>=grid.length || j<0 || j>=grid[0].length || grid[i][j]!=1)
            return 0;
        grid[i][j]=id;
        int l = dfs(grid,i,j-1,id);
        int r = dfs(grid,i,j+1,id);
        int u = dfs(grid,i-1,j,id);
        int d = dfs(grid,i+1,j,id);
        return l+r+u+d+1;
        
    }
}
