class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
         List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(candidates);
        dfs(candidates,target,0,result,new ArrayList<>());
        return result;
    }
    void dfs(int [] candidates,int target,int i,List<List<Integer>> result,List<Integer> currentList){
        if(target==0)    {
            result.add(new ArrayList<>(currentList));
             return;
        }
        if(target<0){
          return;}
        for(int ii=i;ii<candidates.length;ii++){

            if(ii==i || candidates[ii]!=candidates[ii-1]){
               currentList.add(candidates[ii]);
               dfs(candidates,target-candidates[ii],ii+1,result,currentList);
                currentList.remove(currentList.size()-1);
                }
        }
          
    }
}
