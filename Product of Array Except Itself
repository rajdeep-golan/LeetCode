class Solution {
//Without DIVISON without EXTRA SPACE
 public int[] productExceptSelf(int[] nums) {
      
        int[] result = new int[nums.length];
        result[0]=1;
        
        for(int i=1;i<nums.length;i++){
            result[i]=nums[i-1]*result[i-1];
        }
        int r=1;
        for(int i=nums.length-1;i>=0;i--){
            result[i]=r*result[i];
            r*=nums[i];
           
        }
        
        return result;
    }

//Without DIVISON
public int[] productExceptSelf(int[] nums) {
       int[] left = new int[nums.length];
        int[] right= new int[nums.length];
        left[0]=1;
        right[nums.length-1]=1;
        
        for(int i=1;i<nums.length;i++){
            left[i]=nums[i-1]*left[i-1];
        }
        
        for(int i=nums.length-2;i>=0;i--){
            right[i]=nums[i+1]*right[i+1];
        }
        int[] result = new int[nums.length];
        for(int i=0;i<nums.length;i++)
            result[i]=left[i]*right[i];
        return result;
    }
    
//Using DIVISON
    public int[] productExceptSelf(int[] nums) {
        int product=1,bZ=1,aZ=1,k=0;
        int[] result = new int[nums.length];
        for(int n:nums){
            if(n==0){
                bZ = product;
                k=1;
            }else if(k==1)
                aZ*=n;
            product*=n;
        }
        for(int i=0;i<nums.length;i++){
            if(nums[i]!=0)
                result[i]=product/nums[i];
            else
                result[i]=bZ*aZ;
        }
        return result;
    }
}
