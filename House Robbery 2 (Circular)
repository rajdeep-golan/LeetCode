class Solution {
    public int rob(int[] nums) {
        if(nums.length==0 || nums==null)   
            return 0;
        if(nums.length==1)
            return nums[0];
        if(nums.length==2)
            return Math.max(nums[0],nums[1]);
            
            //We take the maximum robbery for either 0 to n-2 th house and 1 to n-1 th house , i.e. we either include the 1st house and exclude last house OR exclude the 1st house and include the last since in a circular arrangement , 1st and last are adjacent to each other
        int dp[]=new int[nums.length-1];
        dp[0]=nums[0];
        dp[1]=Math.max(nums[0],nums[1]);
        for(int i=2;i<nums.length-1;i++)
            dp[i]=Math.max(dp[i-2]+nums[i],dp[i-1]);
        int temp1=dp[nums.length-2];
    
        dp[0]=nums[1];
        dp[1]=Math.max(nums[1],nums[2]);
        for(int i=2;i<nums.length-1;i++)
            dp[i]=Math.max(dp[i-2]+nums[i+1],dp[i-1]);
        int temp2=dp[nums.length-2];
        
        
        return Math.max(temp1,temp2);
    }
}
