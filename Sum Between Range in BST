/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
//Method 1 : Using Recursion
    int sum=0;
    public int rangeSumBST(TreeNode root, int L, int R) {
         getSum(root,L,R);
    return sum;
    }
    void getSum(TreeNode node,int L,int R){
        
        if(node!=null){
            if(node.val>=L && node.val<=R){
                sum+=node.val;
            }
            if(node.val>L && node.left!=null){
                 getSum(node.left,L,R);
            }
            if(node.val<R && node.right!=null){
                 getSum(node.right,L,R);
            }
        }
       
    }
    
    //Methd 2:Using Iteration
    public int rangeSumBST(TreeNode root,int L,int R){
      Stack<TreeNode> s=new Stack();
      s.push(root);
      int sum=0;
      while(!s.isEmpty()){
          TreeNode node=s.pop();  //Taking Top of Stack
      if(node!=null){
        if(node.val>=L && node.val<=R)
          sum+=node.val;
       if(node.val>L && node.left!=null)  //i.e. We can traverse the left subtree(Since as per BST , left child is smaller than root)
        s.push(node.left);
      if(node.val<R && node.right!=null)
        s.push(node.right);
     }
      }
     return sum;
   }
        
}
