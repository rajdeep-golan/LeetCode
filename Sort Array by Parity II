class sortArrayByParityII {

//Method 1: Using new array
    public int[] soltuion(int[] A) {
        int res[]=new int[A.length];
        // first time we look for all even elements in the array and put it in the result in even positions
        for(int i=0,t=0;i<A.length;i++)
            if(A[i]%2==0){
                res[t]=A[i];t+=2;}
        
        // Next time we look for all odd elements in the array and put it in the result in odd positions
        for(int i=0,t=1;i<A.length;i++)
            if(A[i]%2==1){
                res[t]=A[i];t+=2;}
        return res;
    }
    
    //Method 2: We take 2 pointers , i(for even indices) and j(for odd indices) , if we found an element out of order , we will swap
    public int[] sortArrayByParityII(int[] A) {
       int s=0;
        int i=0,j=1;
        int n=A.length;
        while(i<n && j<n){
            while(i<n && A[i]%2==0)
                i+=2;
            while(j<n && A[j]%2==1)
                j+=2;
            
            //We break from the above 2 loops in only 2 cases , either we have iterated through the entire array OR we found an element in incorrect position
            
            if(i<n && j<n){
                //We swap them
                int temp=A[i];
                A[i]=A[j];
                A[j]=temp;
            }
        }
        return A;
    }
    

}
