class Solution {
    public int maxProfit(int k, int[] prices) {
         int dp[][][]= new int[prices.length][2][k];
        for(int i=0;i<prices.length;i++)
        {  for(int j=0;j<k;j++){
            dp[i][0][j]=Integer.MIN_VALUE;
         dp[i][1][j]=Integer.MIN_VALUE;}
        }
        return helper(prices,k,0,0,0,dp);
    }
    public int helper(int[] prices, int k , int stock,int count,int time,int[][][] dp){
        if(count>=k || time>=prices.length)
            return 0;
        if(dp[time][stock][count]!=Integer.MIN_VALUE)
            return dp[time][stock][count];
        int buy,sell;
        if(stock==0)
        buy = (-prices[time])+helper(prices,k,stock+1,count,time+1,dp);
        else
            buy = Integer.MIN_VALUE;
        if(stock==1)
             sell = (prices[time])+helper(prices,k,stock-1,count+1,time+1,dp);
        else
             sell = Integer.MIN_VALUE;
        int hold = helper(prices,k,stock,count,time+1,dp);
        dp[time][stock][count]= (int)Math.max(buy,Math.max(sell,hold));
        return dp[time][stock][count];
    }
}
