/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> list = new ArrayList<>();

        if(root==null)
            return list;
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            int s = q.size();
            List<Integer> current = new ArrayList<>();
            for(int i=0;i<s;i++){
              Node ele = q.remove();
                current.add(ele.val);
                for(Node n:ele.children)
                 if(n!=null)q.add(n);               
            }
            list.add(current);
            
            
        }
        return list;
    }
}
