public class Kanpsack{
  
  //Returns the maximum capacity that can be pushed
  public int solution(int[] val,int[] wt,int W,int n){
    
    //1st Method : Dynamically we store the result of sub-problems in a bottom-up fashion (to avoid computation of overlapping subproblems)
    int k[][]=new int[n+1][W+1];    //2d array to store optimum subproblem solution
    for(int i=0;i<=n;i++){
      for(int j=0;j<=W;j++){
        if(i==0 || j==0)
          k[i][j]=0;
        else if(wt[i]>W)
          k[i][j]=k[i-1][j]
        else    //either include or exclude item(Take maximum)
          k[i][j]=max( val[i-1]+k[i-1][W-wt[i-1]] , k[i-1][w] );
        }
      }
    return k[n][w];
    
    //2nd Method: Using Recursion
    //Base Case , Either number of items is 0 or Capacity is 0
    if(n==0 || W==0)
      return 0;
    
    //if wt of nth item is greater than capacity exclude nth item
    if(wt[n-1]>W)
      return solution(val,wt,W,n-1);
    
    //Otherwise include nth item
    return max(val[n-1]+solution(val,wt,W,n-1),solution(val,wt,W-wt[n],n-1));
    }
    
    //Simple function that returns maximum of 2 numbers
    public int max(int a,int b){
      return a>b?a:b;
     }
 }
    
