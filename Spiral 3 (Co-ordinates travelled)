class SpiralMatrixIII {
    public int[][] solution(int R, int C, int r0, int c0) {
        int ans[][]=new int[R*C][2];
        ans[0][0]=r0;
        ans[0][1]=c0;
        
        //We first move east(right),then south(down), then west(left) and then north(up) , dir stores the direction for each side , eg: EAST is 0,1 i.e. no change in row , and +1 change in column 
        int dir[][]=new int[][]{{0,1},{1,0},{0,-1},{-1,0}};
        int index=0;  //index of direction
        int step=1,increment=1; //increment is 1,1,2,2,3,3 and so on , step is no. of steps , eg: 3 is 5(5th step)
        
        int k=1;  //storing in array
        
        while(k<(R*C)){
            for(int i=0;i<increment;i++){
            r0+=dir[index][0];
            c0+=dir[index][1];
            
                if(r0<R && c0<C && r0>=0 && c0>=0){
            ans[k][0]=r0;
            ans[k++][1]=c0;
                }
            }
            index=(index+1)%4;  //so it stays only till 4(as dir has 4 values)
            
            if(step%2==0) //after every 2  steps , we increase increment
                increment++;
            step++;
            
        }
        return ans;
    }
}
